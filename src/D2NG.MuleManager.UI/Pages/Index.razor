@page "/"
@using D2NG.Core.D2GS.Items
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Web
@inject HttpClient Http

<MudGrid>
    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" @onclick="UpdateMules">Update mules</MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudSelect T="string" Label="Quality" ValueChanged="QualityTypeChanged">
            <MudSelectItem Value="@("-")">None</MudSelectItem>
            <MudSelectItem Value="@("Rare")">Rare</MudSelectItem>
            <MudSelectItem Value="@("Unique")">Unique</MudSelectItem>
            <MudSelectItem Value="@("Crafted")">Crafted</MudSelectItem>
            <MudSelectItem Value="@("Superior")">Superior</MudSelectItem>
            <MudSelectItem Value="@("Normal")">Normal</MudSelectItem>
            <MudSelectItem Value="@("Magical")">Magical</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="3">
        <MudAutocomplete T="string" Label="ItemName" SearchFunc="SearchItemNames" ValueChanged="AddItemNameFilter"/>
    </MudItem>
    <MudItem xs="6">
    </MudItem>
    <MudItem xs="3">
        <MudAutocomplete T="string" Label="StatType" SearchFunc="SearchStatType" ValueChanged="AddStatTypeFilter"/>
    </MudItem>
    <MudItem xs="3">
        <MudAutocomplete T="string" Label="SortOnStatType" SearchFunc="SearchStatType" ValueChanged="SortOnStatValue"/>
    </MudItem>
    <MudItem xs="3">
        <MudAutocomplete T="string" Label="Classification" SearchFunc="SearchClassification" ValueChanged="AddClassificationFilter" />
    </MudItem>
    <MudItem xs="3">
    </MudItem>
    <MudItem xs="12">
        <MudText Class="mb-n3" Typo="Typo.body2">
            Filtered Stats: 
                @foreach (string statType in FilteredStatTypes)
                {
                    <MudChip Color="Color.Primary" OnClose="chip => Closed(chip, statType)">@statType</MudChip>
                }
        </MudText>
    </MudItem>
</MudGrid>
<MudDataGrid @ref="Datagrid" T="MuleItem" Items="@MuleItems" Filterable=false>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Mule Items</MudText>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <PropertyColumn  Property="x => x.AccountName" Title="Account"/>
        <PropertyColumn  Property="x => x.CharacterName" Title="Character"/>
        <PropertyColumn  Property="x => x.ItemName" Title="Type"/>
        <PropertyColumn  Property="x => x.QualityType" Title="Quality"/>
        <PropertyColumn  Property="x => x.StatString" Title="Stats"/>
        <PropertyColumn  Property="x => x.SortedStat" Title="SortedStat"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="MuleItem" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<MuleItem> Datagrid;
    private List<MuleItem> MuleItems = new List<MuleItem>();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    private string qualityTypeValue { get; set; }
    private string sortedStatValue { get; set; }
    private string itemNameValue { get; set; }
    private string classificationValue { get; set; }
    private HashSet<string> FilteredStatTypes = new HashSet<string>();

    void Closed(MudChip chip, string chipValue) {
        FilteredStatTypes.Remove(chipValue);
        RefreshMules().AndForget();
    }

    protected async Task RefreshMules()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        var parameters = new List<(string, string)>();
        if(!string.IsNullOrEmpty(qualityTypeValue) && qualityTypeValue != "-")
        {
            parameters.Add(("qualityType", qualityTypeValue));
        }

        if(!string.IsNullOrEmpty(itemNameValue) && itemNameValue != "-")
        {
            parameters.Add(("itemName", itemNameValue));
        }

        if (!string.IsNullOrEmpty(classificationValue) && classificationValue != "-")
        {
            parameters.Add(("classification", classificationValue));
        }

        foreach(var statType in FilteredStatTypes)
        {
            parameters.Add(("statTypes", statType));
        }

        var url = string.Format("https://localhost:5001/items?{0}",
            string.Join("&",
        parameters.Select(kvp => $"{kvp.Item1}={kvp.Item2}")));

        try
        {
            MuleItems = await Http.GetFromJsonAsync<List<MuleItem>>(url, cancellationTokenSource.Token);
            foreach(var muleItem in MuleItems)
            {
                muleItem.StatString = (@MarkupString)string.Join(", ", muleItem.Stats.Select(k => $"{k.Type} : {k.Value}"));
            }
            await InvokeAsync(() => StateHasChanged());
        }
        catch(OperationCanceledException)
        {

        }

    }

    protected async Task UpdateMules(MouseEventArgs e)
    {
        await Http.PutAsync("https://localhost:5001/items", null);
        await RefreshMules();
    }

    private void QualityTypeChanged(string value)
    {
        if(!string.IsNullOrEmpty(value))
        {
            qualityTypeValue = value;
            RefreshMules().AndForget();
        }
    }

    private void AddStatTypeFilter(string value)
    {
        if(!string.IsNullOrEmpty(value))
        {
            FilteredStatTypes.Add(value);
            RefreshMules().AndForget();
        }
    }

    private void AddItemNameFilter(string value)
    {
        if(!string.IsNullOrEmpty(value))
        {
            itemNameValue = value;
            RefreshMules().AndForget();
        }
    }

    private void AddClassificationFilter(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            classificationValue = value;
            RefreshMules().AndForget();
        }
    }

    private void SortOnStatValue(string value)
    {
        sortedStatValue = value;
        foreach(var muleItem in MuleItems)
        {
            muleItem.SortedStat = muleItem.Stats.Find(s => s.Type == value)?.Value ?? 0;
        }
        Datagrid.SetSortAsync("SortedStat", SortDirection.Descending, m => m.SortedStat).AndForget();
    }

    private Task<IEnumerable<string>> SearchStatType(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return Task.FromResult<IEnumerable<string>>(Enum.GetNames(typeof(StatType)));

        return Task.FromResult<IEnumerable<string>>(Enum.GetNames(typeof(StatType)).Where(s => s.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    private Task<IEnumerable<string>> SearchItemNames(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            var itemNames = Enum.GetNames(typeof(ItemName))
            .Prepend("-");
            return Task.FromResult<IEnumerable<string>>(itemNames);
        }
        else
        {
            var itemNames = Enum.GetNames(typeof(ItemName))
            .Where(s => s.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Prepend("-");
            return Task.FromResult<IEnumerable<string>>(itemNames);
        }
    }

    private Task<IEnumerable<string>> SearchClassification(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            var classifications = Enum.GetNames(typeof(ClassificationType))
            .Prepend("-");
            return Task.FromResult<IEnumerable<string>>(classifications);
        }
        else
        {
            var classifications = Enum.GetNames(typeof(ClassificationType))
            .Where(s => s.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Prepend("-");
            return Task.FromResult<IEnumerable<string>>(classifications);
        }
    }

    public class Stat
    {
        public string Type { get; set; }
        public int Value { get; set; }
    }

    public class MuleItem
    {
        public string Id { get; set; }
        public string AccountName { get; set; }
        public string CharacterName { get; set; }
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ItemName ItemName { get; set; }
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public QualityType QualityType { get; set; }
        public bool Ethereal { get; set; }
        public uint Sockets { get; set; }
        public uint Level { get; set; }
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ClassificationType ClassificationType { get; set; }
        public List<Stat> Stats { get; set; } = new List<Stat>();
        public MarkupString StatString { get; set; }
        public int SortedStat { get; set; }
    }
}