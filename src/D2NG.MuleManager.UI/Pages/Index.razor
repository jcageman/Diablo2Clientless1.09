@page "/"

@inject HttpClient Http
@using D2NG.MuleManager.UI.Models

<h1>Mule Items</h1>

<button class="btn btn-primary" @onclick="LoadMules">
    Load mules
</button>
<button class="btn btn-primary" @onclick="UpdateMules">
    Update mules
</button>

<table class="table">
    <thead>
        <tr>
            <th>Account - Character</th>
            <th>Quality</th>
            <th>Item</th>
            <th>Stats</th>
        </tr>
        <tr>
            <th></th>
            <th>
                <select @onchange=@UpdateQualityType>
                    @foreach (var template in itemTypes)
                    {
                        <option value=@template>@template</option>
                    }
                </select>
            </th>
            <th>
                ItemName: <select @onchange=@UpdateItemName>
                    @foreach (var template in Enum.GetValues(typeof(ItemName)))
                    {
                        <option value=@template>@template</option>
                    }
                </select> <br />Or Classification: <select @onchange=@UpdateClassificationType>
                    @foreach (var template in Enum.GetValues(typeof(ClassificationType)))
                    {
                        <option value=@template>@template</option>
                    }
                </select> <br />Sockets: <select @onchange=@UpdateNumberOfSockets>
                    }
                    <option>0</option>
                    <option>1</option>
                    <option>2</option>
                    <option>3</option>
                    <option>4</option>
                    <option>5</option>
                </select>
                <br />Ethereal:
                <input type="checkbox" @onchange="@UpdateEthereal" />
            </th>
            <th>
                Filter 1<select @onchange=@UpdateStatType>
                    @foreach (var template in Enum.GetValues(typeof(StatType)))
                    {
                        <option value=@template>@template</option>
                    }
                </select>
                <br />Filter 2<select @onchange=@UpdateStatType2>
                    @foreach (var template in Enum.GetValues(typeof(StatType)))
                    {
                        <option value=@template>@template</option>
                    }
                </select>
                <br />OrderBy Descending
                <select @onchange=@OrderByStatType>
                    @foreach (var template in Enum.GetValues(typeof(StatType)))
                    {
                        <option value=@template>@template</option>
                    }
                </select>
            </th>
        </tr>

    </thead>
    <tbody>
        @foreach (var item in filteredMuleItems)
        {
            <tr>
                <td>@item.AccountName - @item.CharacterName</td>
                <td>@item.QualityType</td>
                <td>@((MarkupString)$"{@item.ItemName} (ilvl {item.Level}) ({item.Sockets}s)")</td>
                <td>@((MarkupString)string.Join("<br />", item.Stats.Select(k => $"{k.Key} : {k.Value}")))</td>
            </tr>
        }
    </tbody>
</table>

@code {

        List<string> itemTypes = new List<string>() { "Inferior", "Normal", "Superior", "Magical", "Set", "Rare", "Unique", "Crafted" };
        string selectedQualityType;
        string selectedClassificationType;
        string selectedItemName;
        string selectedStatType1;
        string selectedStatType2;
        string selectedOrderByStatType;
        int? selectedNumberOfSockets;
        bool selectEthereal = false;

        void UpdateQualityType(ChangeEventArgs e)
        {
            selectedQualityType = e.Value.ToString();
            UpdateFilteredItems();
        }

        void UpdateItemName(ChangeEventArgs e)
        {
            selectedItemName = e.Value.ToString();
            selectedClassificationType = null;
            UpdateFilteredItems();
        }

        void UpdateClassificationType(ChangeEventArgs e)
        {
            selectedItemName = null;
            selectedClassificationType = e.Value.ToString();
            UpdateFilteredItems();
        }

        void UpdateNumberOfSockets(ChangeEventArgs e)
        {
            selectedNumberOfSockets = int.Parse(e.Value.ToString());
            UpdateFilteredItems();
        }

        void UpdateEthereal(ChangeEventArgs e)
        {
            selectEthereal = (bool)e.Value;
            UpdateFilteredItems();
        }

        void UpdateStatType(ChangeEventArgs e)
        {
            selectedStatType1 = e.Value.ToString();
            UpdateFilteredItems();
        }

        void UpdateStatType2(ChangeEventArgs e)
        {
            selectedStatType2 = e.Value.ToString();
            UpdateFilteredItems();
        }

        void OrderByStatType(ChangeEventArgs e)
        {
            selectedOrderByStatType = e.Value.ToString();
            UpdateFilteredItems();
        }

        void UpdateFilteredItems()
        {
            filteredMuleItems = muleItems.Where(i =>
            (selectedQualityType == null || i.QualityType.ToString() == selectedQualityType)
            && (selectedClassificationType == null || i.ClassificationType.ToString() == selectedClassificationType)
            && (selectedItemName == null || i.ItemName.ToString() == selectedItemName)
            && (selectedNumberOfSockets == null || i.Sockets == selectedNumberOfSockets)
            && i.Ethereal == selectEthereal
            && (selectedStatType1 == null || i.Stats.ContainsKey(selectedStatType1))
            && (selectedStatType2 == null || i.Stats.ContainsKey(selectedStatType2))).OrderByDescending(i => selectedOrderByStatType != null ? i.Stats.GetValueOrDefault(selectedOrderByStatType, 0) : 0).ToList();
        }

    private MuleItem[] muleItems = new MuleItem[0];

    private List<MuleItem> filteredMuleItems = new List<MuleItem>();

    protected async Task LoadMules()
    {
        muleItems = await Http.GetFromJsonAsync<MuleItem[]>("https://localhost:5001/items");
        UpdateFilteredItems();
    }

    protected async Task UpdateMules(MouseEventArgs e)
    {
        await Http.PutAsync("https://localhost:5001/items", null);
        await LoadMules();
    }

    public class MuleItem
    {
        public string Id { get; set; }
        public string AccountName { get; set; }
        public string CharacterName { get; set; }
        public string ItemName { get; set; }
        public string QualityType { get; set; }
        public bool Ethereal { get; set; }
        public uint Sockets { get; set; }
        public uint Level { get; set; }
        public string ClassificationType { get; set; }
        public Dictionary<string, int> Stats { get; set; }
    }
}
